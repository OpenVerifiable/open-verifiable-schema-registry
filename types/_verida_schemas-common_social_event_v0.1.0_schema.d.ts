/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Schema for a calendar event
 */
export type Event = BaseSchema & {
  status?: Status;
  description?: Description;
  /**
   * Reference ID for the calendar object
   */
  calendarId: string;
  uri?: URI;
  location?: Location;
  creator?: Creator;
  organizer?: Organizer;
  start: Start;
  end?: End;
  attendees?: Attendees;
  conferenceData?: ConferenceData;
  attachments?: Attachments;
  [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Name = string;
/**
 * Brief summary of item
 */
export type Summary = string;
/**
 * Is this record archived?
 */
export type Archived = boolean;
/**
 * URI of the schema for this record
 */
export type Schema = string;
/**
 * Name of the application this data was sourced from
 */
export type SourceApplication = string;
/**
 * ID of the account from the original data source
 */
export type SourceAccountID = string;
/**
 * ID from the original data source
 */
export type SourceID = string;
/**
 * URL of an icon for this record. Must be square, prefer SVG, otherwise minimum 50p x 50p
 */
export type Icon = string;
/**
 * Additional text that should be indexed for search purposes
 */
export type IndexableText = string;
/**
 * Date/time this record was inserted
 */
export type Inserted = string;
/**
 * Date/time this record was modified
 */
export type Modified = string;
/**
 * Status of the event
 */
export type Status = "confirmed" | "tentative" | "cancelled";
/**
 * Detailed description of the event
 */
export type Description = string;
export type URI = string;
/**
 * Location of the event
 */
export type Location = string;
/**
 * List of attendees for the event
 */
export type Attendees = Person[];
/**
 * Attachments for the event
 */
export type Attachments = {
  fileUrl?: string;
  title?: string;
  mimeType?: string;
  iconLink?: string;
  fileId?: string;
  [k: string]: unknown;
}[];

/**
 * A base schema
 */
export interface BaseSchema {
  name?: Name;
  summary?: Summary;
  archived?: Archived;
  schema: Schema;
  signatures?: Signatures;
  sourceApplication?: SourceApplication;
  sourceAccountId?: SourceAccountID;
  sourceId?: SourceID;
  sourceData?: SourceData;
  icon?: Icon;
  indexableText?: IndexableText;
  insertedAt?: Inserted;
  modifiedAt?: Modified;
  [k: string]: unknown;
}
/**
 * Signatures verifying this data has been signed
 */
export interface Signatures {
  [k: string]: unknown;
}
/**
 * Raw data from the original source
 */
export interface SourceData {
  [k: string]: unknown;
}
/**
 * Details of the event creator
 */
export interface Creator {
  /**
   * Email address of the person
   */
  email: string;
  /**
   * Display name of the person
   */
  displayName?: string;
  [k: string]: unknown;
}
/**
 * Details of the event organizer
 */
export interface Organizer {
  /**
   * Email address of the person
   */
  email: string;
  /**
   * Display name of the person
   */
  displayName?: string;
  [k: string]: unknown;
}
/**
 * Start time of the event
 */
export interface Start {
  dateTime: string;
  /**
   * UTC offset format
   */
  timezone?: string;
  [k: string]: unknown;
}
/**
 * End time of the event
 */
export interface End {
  dateTime: string;
  /**
   * UTC offset format
   */
  timezone?: string;
  [k: string]: unknown;
}
/**
 * Schema representing a person
 */
export interface Person {
  /**
   * Email address of the person
   */
  email: string;
  /**
   * Display name of the person
   */
  displayName?: string;
  [k: string]: unknown;
}
/**
 * Details about the conference associated with the event
 */
export interface ConferenceData {
  [k: string]: unknown;
}
