/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Configuration of a profile on Verida One
 */
export type VeridaOneProfile = BaseSchema & {
  customLinks?: CustomLinks;
  platformLinks?: PlatformLinks;
  walletAddresses?: WalletAddresses;
  featuredAssets?: FeaturedAssets;
  [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Name = string;
/**
 * Brief summary of item
 */
export type Summary = string;
/**
 * Is this record archived?
 */
export type Archived = boolean;
/**
 * URI of the schema for this record
 */
export type Schema = string;
/**
 * Name of the application this data was sourced from
 */
export type SourceApplication = string;
/**
 * ID of the account from the original data source
 */
export type SourceAccountID = string;
/**
 * ID from the original data source
 */
export type SourceID = string;
/**
 * URL of an icon for this record. Must be square, prefer SVG, otherwise minimum 50p x 50p
 */
export type Icon = string;
/**
 * Additional text that should be indexed for search purposes
 */
export type IndexableText = string;
/**
 * Date/time this record was inserted
 */
export type Inserted = string;
/**
 * Date/time this record was modified
 */
export type Modified = string;
export type Label = string;
export type URL = string;
export type Featured = boolean;
export type Order = number;
/**
 * @minItems 0
 */
export type CustomLinks = CustomLink[];
export type Category = "social";
export type Platform = string;
export type AccountId = string;
export type AvatarURL = string;
/**
 * External url to the platform
 */
export type URL1 = string;
export type Order1 = number;
/**
 * @minItems 0
 */
export type PlatformLinks = PlatformLink[];
/**
 * CAIP id of the blockchain
 */
export type ChainId = string;
export type Address = string;
export type Label1 = string;
export type Order2 = number;
/**
 * @minItems 0
 */
export type WalletAddresses = WalletAddress[];
/**
 * CAIP id of the blockchain
 */
export type ChainId1 = string;
export type ContractAddress = string;
export type TokenId = string;
export type OwnerAddress = string;
export type Order3 = number;
/**
 * @minItems 0
 */
export type FeaturedAssets = FeaturedAsset[];

/**
 * A base schema
 */
export interface BaseSchema {
  name?: Name;
  summary?: Summary;
  archived?: Archived;
  schema: Schema;
  signatures?: Signatures;
  sourceApplication?: SourceApplication;
  sourceAccountId?: SourceAccountID;
  sourceId?: SourceID;
  sourceData?: SourceData;
  icon?: Icon;
  indexableText?: IndexableText;
  insertedAt?: Inserted;
  modifiedAt?: Modified;
  [k: string]: unknown;
}
/**
 * Signatures verifying this data has been signed
 */
export interface Signatures {
  [k: string]: unknown;
}
/**
 * Raw data from the original source
 */
export interface SourceData {
  [k: string]: unknown;
}
export interface CustomLink {
  label: Label;
  url: URL;
  featured?: Featured;
  order: Order;
  [k: string]: unknown;
}
export interface PlatformLink {
  category: Category;
  platform: Platform;
  accountId: AccountId;
  avatarUrl?: AvatarURL;
  url: URL1;
  verificationProof?: {
    type: Type;
    proof: Proof;
    [k: string]: unknown;
  };
  order: Order1;
  [k: string]: unknown;
}
export interface Type {
  [k: string]: unknown;
}
export interface Proof {
  [k: string]: unknown;
}
export interface WalletAddress {
  chainId: ChainId;
  address: Address;
  label?: Label1;
  verificationProof?: {
    type: Type1;
    proof: Proof1;
    [k: string]: unknown;
  };
  order: Order2;
  [k: string]: unknown;
}
export interface Type1 {
  [k: string]: unknown;
}
export interface Proof1 {
  [k: string]: unknown;
}
export interface FeaturedAsset {
  chainId: ChainId1;
  contractAddress: ContractAddress;
  tokenId: TokenId;
  ownerAddress: OwnerAddress;
  order: Order3;
  [k: string]: unknown;
}
