/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * General history of activities such as listening, watching, browsing, etc.
 */
export type History = BaseSchema & {
    timestamp: Timestamp;
    activityType: ActivityType;
    url?: URL;
    duration?: Duration;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Name = string;
/**
 * Brief summary of item
 */
export type Summary = string;
/**
 * Is this record archived?
 */
export type Archived = boolean;
/**
 * URI of the schema for this record
 */
export type Schema = string;
/**
 * Name of the application this data was sourced from
 */
export type SourceApplication = string;
/**
 * ID of the account from the original data source
 */
export type SourceAccountID = string;
/**
 * ID from the original data source
 */
export type SourceID = string;
/**
 * URL of an icon for this record. Must be square, prefer SVG, otherwise minimum 50p x 50p
 */
export type Icon = string;
/**
 * Additional text that should be indexed for search purposes
 */
export type IndexableText = string;
/**
 * Date/time this record was inserted
 */
export type Inserted = string;
/**
 * Date/time this record was modified
 */
export type Modified = string;
/**
 * When the activity occurred
 */
export type Timestamp = string;
/**
 * Type of activity (e.g., listening, watching, browsing)
 */
export type ActivityType = "listening" | "watching" | "browsing" | "reading";
/**
 * Duration of the activity in seconds
 */
export type Duration = number;
/**
 * A base schema
 */
export interface BaseSchema {
    name?: Name;
    summary?: Summary;
    archived?: Archived;
    schema: Schema;
    signatures?: Signatures;
    sourceApplication?: SourceApplication;
    sourceAccountId?: SourceAccountID;
    sourceId?: SourceID;
    sourceData?: SourceData;
    icon?: Icon;
    indexableText?: IndexableText;
    insertedAt?: Inserted;
    modifiedAt?: Modified;
    [k: string]: unknown;
}
/**
 * Signatures verifying this data has been signed
 */
export interface Signatures {
    [k: string]: unknown;
}
/**
 * Raw data from the original source
 */
export interface SourceData {
    [k: string]: unknown;
}
/**
 * The link of source information
 */
export interface URL {
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * AI assistants and their configuration
 */
export type AIAssistant = BaseSchema & {
    name: Name1;
    order?: Order;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Name1 = string;
export type Order = number;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Saved prompts for the assistant
 */
export type UserPrompt = BaseSchema & {
    assistantId: AssistantID;
    name: Name1;
    prompt: Prompt;
    order?: Order;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type AssistantID = string;
/**
 * The user-friendly label
 */
export type Prompt = string;
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * DID JWT representation of this credential
 */
export type DIDJWTVerifiableCredential = string;
export interface Credential {
    didJwtVc: DIDJWTVerifiableCredential;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type CredentialSchema = string;
/**
 * A base schema
 */
export interface CredentialData {
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type Content = string;
export type Expires = string;
/**
 * An encrypted credential
 */
export interface EncryptedCredential {
    content: Content;
    expires?: Expires;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Unique id of the task allocated by the allocator node
 */
export type AppID = string;
/**
 * ID of http provider
 *
 * @minItems 1
 */
export type HttpProviderId = [string, ...string[]];
/**
 * Values of public fields defined in schema
 *
 * @minItems 1
 */
export type Proofs = [
    {
        identifier: Identifier;
        claimData: ClaimData;
        signature: Signature;
        witnesses?: Witnesses;
        [k: string]: unknown;
    },
    ...{
        identifier: Identifier;
        claimData: ClaimData;
        signature: Signature;
        witnesses?: Witnesses;
        [k: string]: unknown;
    }[]
];
/**
 * Identifier of provider
 */
export type Identifier = string;
/**
 * Protocol of request
 */
export type Protocol = string;
/**
 * Stringfied JSON object of parameters and API reqeusts
 */
export type ParametersOfRequest = string;
/**
 * Identifier of request
 */
export type IdentifierOfRequest = string;
/**
 * Epoch of request
 */
export type EpochOfRequest = string;
/**
 * The signature of verification credential
 *
 * @minItems 1
 */
export type Signature = [string, ...string[]];
/**
 * Witness
 *
 * @minItems 1
 */
export type Witnesses = [
    {
        id: ID;
        url: URL;
        [k: string]: unknown;
    },
    ...{
        id: ID;
        url: URL;
        [k: string]: unknown;
    }[]
];
/**
 * ID
 */
export type ID = string;
/**
 * URL
 */
export type SessionId = string;
/**
 * The ID of reclaim provider
 */
export type ReclaimProviderID = string;
/**
 * The label of reclaim provider
 */
export type ReclaimProviderLabel = string;
/**
 * DID of the subject
 */
export type Did = string;
/**
 * A schema for reclaim protocol credential
 */
export interface SchemaForReclaimProtocol {
    appId: AppID;
    httpProviderId?: HttpProviderId;
    proofs: Proofs;
    sessionId: SessionId;
    reclaimProviderId: ReclaimProviderID;
    reclaimProviderLabel: ReclaimProviderLabel;
    id: Did;
    [k: string]: unknown;
}
/**
 * Verifiable credential data
 */
export interface ClaimData {
    provider: Protocol;
    parameters?: ParametersOfRequest;
    identifier: IdentifierOfRequest;
    epoch?: EpochOfRequest;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Unique id of the task allocated by the allocator node
 */
export type TaskID = string;
/**
 * Values of public fields defined in schema
 */
export type ZkPassPublicFields = string[];
/**
 * The address of the allocator node
 */
export type AllocatorAddress = string;
/**
 * Hash of public field values
 */
export type PublicFields = string;
/**
 * Signature of the task meta data by the allocator node
 */
export type AllocatorSignature = string;
/**
 * Hash value of user unique id in the data source
 */
export type UHash = string;
/**
 * The address of the validator node
 */
export type ValidatorAddress = string;
/**
 * The signature of the verification result by the allocator node
 */
export type ValidatorSignature = string;
/**
 * The ID of zkPass schema
 */
export type ZkPassSchemaID = string;
/**
 * The label of zkPass schema
 */
export type SchemaLabel = string;
/**
 * Decentralized Identifier on the network
 */
export type DIDOfTheSubject = string;
/**
 * A schema for zkpass credential
 */
export interface SchemaForZKPass {
    taskId: TaskID;
    publicFields?: ZkPassPublicFields;
    allocatorAddress: AllocatorAddress;
    publicFieldsHash?: PublicFields;
    allocatorSignature: AllocatorSignature;
    uHash: UHash;
    validatorAddress: ValidatorAddress;
    validatorSignature: ValidatorSignature;
    zkPassSchemaId: ZkPassSchemaID;
    zkPassSchemaLabel: SchemaLabel;
    id: DIDOfTheSubject;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Base64 encoded data
 */
export type Data1 = string;
/**
 * Base64 encoded data
 */
export interface Data {
    data: Data1;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A document
 */
export type Document = BaseSchema & {
    type: Type;
    size?: Size;
    contentText: ContentText;
    contentRaw?: Content;
    uri?: URI;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Type = "txt" | "pdf" | "doc" | "docx" | "xls" | "xlsx" | "ppt" | "pptx" | "other";
/**
 * Size of the document in bytes
 */
export type Size = number;
/**
 * Text content of the document
 */
export type ContentText = string;
/**
 * Base64 encoded content of the document (optional)
 */
export type URI = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Favourite links across all platforms
 */
export type Favourite = BaseSchema & {
    favouriteType: FavouriteType;
    contentType: ContentType;
    uri: URI;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type FavouriteType = "like" | "favourite" | "recommendation" | "share";
/**
 * Type of post
 */
export type ContentType = "video" | "audio" | "document" | "webpage";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A file
 */
export type File = BaseSchema & {
    extension: Extension;
    mimeType: MIMEType;
    size: Size;
    contentText?: ContentText;
    fileDataId?: FileDataID;
    uri?: URI;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Extension = string;
/**
 * MIME type of the file
 */
export type MIMEType = string;
/**
 * Size of the document in bytes
 */
export type FileDataID = string;
/**
 * External link to the document (optional)
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Name of this item
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 *  A code specifying the particular kind of Act that the Act-instance represents within its class.  Constraints:
 * The kind of Act (e.g. physical examination, serum potassium, inpatient encounter, charge financial transaction, etc.) is specified with a code from one of several, typically external, coding systems.  The coding system will depend on the class of Act, such as LOINC for observations, etc. Conceptually, the Act.code must be a specialization of the Act.classCode. This is why the structure of ActClass domain should be reflected in the superstructure of the ActCode domain and then individual codes or externally referenced vocabularies subordinated under these domains that reflect the ActClass structure. Act.classCode and Act.code are not modifiers of each other but the Act.code concept should really imply the Act.classCode concept. For a negative example, it is not appropriate to use an Act.code "potassium" together with and Act.classCode for "laboratory observation" to somehow mean "potassium laboratory observation" and then use the same Act.code for "potassium" together with Act.classCode for "medication" to mean "substitution of potassium". This mutually modifying use of Act.code and Act.classCode is not permitted.
 */
export interface V3CodeSystemActCode {
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * This example value set defines a set of codes that can be used to indicate the role of a Practitioner.
 */
export interface PractitionerRole {
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * This value set defines an example set of codes of service-types.
 */
export interface ServiceType {
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type FullName = string;
/**
 * YYYY-MM-DD
 */
export type DateOfBirth = string;
export type PatientID = string;
export type TestTimestamp = string;
export interface IdentifiablePathologyTest {
    fullName: FullName;
    dateOfBirth: DateOfBirth;
    patientId?: PatientID;
    testTimestamp: TestTimestamp;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type CholesterolTotalTest = IdentifiablePathologyTest & {
    result?: ResultMgDL;
    acceptable?: AcceptableRange;
    [k: string]: unknown;
};
export type ResultMgDL = number;
export type AcceptableRange = "Yes" | "No";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type COVID19PCRTest = IdentifiablePathologyTest & {
    result?: Result;
    [k: string]: unknown;
};
export type Result = "Positive" | "Negative";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type GlucoseFastingTest = IdentifiablePathologyTest & {
    result?: ResultMgDL;
    acceptable?: AcceptableRange;
    [k: string]: unknown;
};
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type HaemoglobinTest = IdentifiablePathologyTest & {
    result?: ResultGDL;
    acceptable?: AcceptableRange;
    [k: string]: unknown;
};
export type ResultGDL = number;
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type SyphilisABTest = IdentifiablePathologyTest & {
    result?: Result;
    [k: string]: unknown;
};
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type AustraliaBasicKYC = BaseSchema & Credential & {
    gender?: Gender;
    firstName: FirstName;
    lastName?: DateOfBirth;
    streetAddress1?: StreetAddress1;
    suburb?: Suburb;
    state?: State;
    postcode?: PostCode;
    dateOfBirth?: DateOfBirth1;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Gender = "male" | "female";
export type FirstName = string;
export type StreetAddress1 = string;
export type Suburb = string;
export type State = string;
export type PostCode = string;
/**
 * A base schema
 */
export interface DateOfBirth1 {
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type LastName = string;
export type StreetAddress = string;
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type FinClusiveId = string;
export type ComplianceProfileLevel = string;
export type ComplianceStatus = string;
/**
 * YYYY-MM-DD
 */
export type CreationDate = string;
/**
 * YYYY-MM-DD
 */
export type ValidUntil = string;
export type FinClusiveComplianceApiUrl = string;
export interface FinClusiveBasicIndividualKYC {
    finClusiveId?: FinClusiveId;
    firstName: FirstName;
    lastName?: LastName;
    streetAddress1?: StreetAddress;
    suburb?: Suburb;
    state?: State;
    postcode?: PostCode;
    dateOfBirth?: DateOfBirth;
    complianceProfileLevel?: ComplianceProfileLevel;
    complianceStatus?: ComplianceStatus;
    creationDate?: CreationDate;
    validUntil?: ValidUntil;
    finClusiveComplianceApiUrl?: FinClusiveComplianceApiUrl;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type Process = string;
export type ApprovalDate = string;
export interface VeriteKYCAMLAttestation {
    type: Type;
    process: Process;
    approvalDate: ApprovalDate;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Location tracking data
 */
export type Location = BaseSchema & {
    latitude: Latitude;
    longitude: Longitude;
    locationAccuracy?: LocationAccuracy;
    altitude?: Altitude;
    altitudeAccuracy?: AltitudeAccuracy;
    isMoving?: Moving;
    speed?: Speed;
    speedAccuracy?: SpeedAccuracy;
    heading?: Heading;
    headingAccuracy?: HeadingAccuracy;
    activityType?: ActivityType;
    timestamp: Timetstamp;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Latitude = number;
export type Longitude = number;
export type LocationAccuracy = number;
export type Altitude = number;
export type AltitudeAccuracy = number;
export type Moving = boolean;
export type Speed = number;
export type SpeedAccuracy = number;
export type Heading = number;
export type HeadingAccuracy = number;
export type Timetstamp = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A generic schema for playlists from platforms like Spotify, YouTube, etc.
 */
export type Playlist = BaseSchema & {
    type: Type;
    owner?: Person;
    tracks?: Tracks;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type TrackID = string;
/**
 * Title of the track/video
 */
export type Title = string;
/**
 * Name of the artist or content creator
 */
export type ArtistCreator = string;
/**
 * Album name (if applicable, e.g., for Spotify)
 */
export type Album = string;
/**
 * URL of the thumbnail image
 */
export type Thumbnail = string;
/**
 * Duration of the track/video in milliseconds
 */
export type Tracks = Track[];
/**
 * A base schema
 */
export interface Person {
    /**
     * Email address of the person
     */
    email?: string;
    /**
     * Display name of the person
     */
    displayName: string;
    [k: string]: unknown;
}
/**
 * Schema representing a track or video in the playlist
 */
export interface Track {
    id: TrackID;
    title: Title;
    artist?: ArtistCreator;
    album?: Album;
    thumbnail?: Thumbnail;
    duration?: Duration;
    url?: URL;
    type?: Type;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Public profile data for a user
 */
export type Profile = BaseSchema & {
    name: string;
    country?: string;
    description?: string;
    /**
     * Website URL
     */
    website?: string;
    /**
     * Profile image for the profile
     */
    avatar?: {
        uri?: string;
        [k: string]: unknown;
    };
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type Coupon = BaseSchema & {
    title: Title;
    description?: Description;
    value: Value;
    valueType?: ValueType;
    currency?: Currency;
    barcode?: BarCode;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Description = string;
export type Value = string;
export type ValueType = string;
export type Currency = string;
export type BarCode = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Calendar information
 */
export type Calendar = BaseSchema & {
    description?: Description;
    /**
     * UTC offset format
     */
    timezone: string;
    location?: Location;
    syncData?: SyncData;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type SyncData = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Chat group that contains chat messages
 */
export type ChatGroup = BaseSchema & {
    uri?: URI;
    newestId?: NewestID;
    syncData?: SyncData;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type NewestID = string;
/**
 * Data to help co-ordinating the sync of messages in this group
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Single message within a chat group
 */
export type ChatMessage = BaseSchema & {
    groupId: ChatGroupID;
    groupName?: ChatGroupName;
    type: Type;
    messageText: MessageText;
    messageHTML?: MessageHTML;
    fromId: FromID;
    fromHandle?: FromHandle;
    fromName?: FromName;
    sentAt: SentAt;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type ChatGroupID = string;
export type ChatGroupName = string;
/**
 * Type of message (send, receive)
 */
export type MessageText = string;
export type MessageHTML = string;
export type FromID = string;
export type FromHandle = string;
export type FromName = string;
export type SentAt = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A record of a contact
 */
export type Contact = BaseSchema & {
    firstName: FirstName;
    lastName: LastName;
    email?: Email;
    mobile?: Mobile;
    did?: DID;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Email = string;
export type Mobile = string;
export type DID = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Email message
 */
export type FromEmail = string;
/**
 * Message content of the email as text
 */
export type Attachments = {
    id: string;
    filename: string;
    data?: string;
    textContent: string;
    uri?: string;
    [k: string]: unknown;
}[];
export type SourceData1 = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Schema for a calendar event
 */
export type Event = BaseSchema & {
    status?: Status;
    description?: Description;
    /**
     * Reference ID for the calendar object
     */
    calendarId: string;
    uri?: URI;
    location?: Location;
    creator?: Creator;
    organizer?: Organizer;
    start: Start;
    end?: End;
    attendees?: Attendees;
    conferenceData?: ConferenceData;
    attachments?: Attachments;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Status = "confirmed" | "tentative" | "cancelled";
/**
 * Detailed description of the event
 */
export type Attendees = Person[];
/**
 * Attachments for the event
 */
export interface Creator {
    /**
     * Email address of the person
     */
    email: string;
    /**
     * Display name of the person
     */
    displayName?: string;
    [k: string]: unknown;
}
/**
 * Details of the event organizer
 */
export interface Organizer {
    /**
     * Email address of the person
     */
    email: string;
    /**
     * Display name of the person
     */
    displayName?: string;
    [k: string]: unknown;
}
/**
 * Start time of the event
 */
export interface Start {
    dateTime: string;
    /**
     * UTC offset format
     */
    timezone?: string;
    [k: string]: unknown;
}
/**
 * End time of the event
 */
export interface End {
    dateTime: string;
    /**
     * UTC offset format
     */
    timezone?: string;
    [k: string]: unknown;
}
/**
 * Schema representing a person
 */
export interface ConferenceData {
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A person or business I am following
 */
export type Following = BaseSchema & {
    uri?: URI;
    followedTimestamp?: FollowedTimestamp;
    sourceData?: SourceData1;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type FollowedTimestamp = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Schema for a meeting transcript
 */
export type MeetingTranscript = BaseSchema & {
    organizerEmail: OrganizerEmail;
    user?: User;
    speakers?: Speakers;
    meetingAttendees?: MeetingAttendees;
    duration?: Duration;
    dateTime?: Datetime;
    sentence?: Sentence;
    calendarEventId?: CalendarID;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type OrganizerEmail = string;
/**
 * Array of speakers
 */
export type Speakers = Person[];
/**
 * List of meeting attendees
 */
export type MeetingAttendees = Person[];
/**
 * Duration of the meeting audio in seconds
 */
export type Datetime = string;
/**
 * Array of sentences in the transcript with details like raw text, speaker name, etc.
 */
export type Sentence = Sentence1[];
/**
 * Unique identifier for the calendar event (Google or Outlook)
 */
export type CalendarID = string;
/**
 * A base schema
 */
export interface User {
    /**
     * Email address of the person
     */
    email?: string;
    /**
     * Display name of the person
     */
    displayName: string;
    /**
     * Full name of the attendee
     */
    name?: string;
    /**
     * Phone number of the attendee
     */
    phoneNumber?: string;
    [k: string]: unknown;
}
/**
 * Schema representing a person
 */
export interface Sentence1 {
    /**
     * Raw text of the sentence
     */
    rawText: string;
    /**
     * Name of the speaker for this sentence
     */
    speakerName: string;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Social media post
 */
export type Post = BaseSchema & {
    type?: Type;
    content?: Content;
    contentHtml?: ContentHtml;
    uri: URI;
    sourceData?: SourceData1;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type ContentHtml = string;
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * URL of an image representing this credential
 */
export type ImageURL = string;
/**
 * URL of an image representing this credential
 */
export type ImageURL1 = string;
/**
 * An external URL with more info (ie: twitter account page)
 */
export type ExternalURL = string;
/**
 * Unique name of this credential
 */
export type TraitType = string;
export type Attributes = Attribute[];
/**
 * Description of this credential
 */
export type BackgroundColor = string;
/**
 * A URL to a multi-media attachment for the item.
 */
export type AnimationURL = string;
/**
 * A URL to a Youtube video
 */
export type YoutubeURL = string;
/**
 * OpenSea metadata standards (https://docs.opensea.io/docs/metadata-standards)
 */
export interface OpenSeaMetadata {
    image?: ImageURL;
    image_data?: ImageURL1;
    external_url?: ExternalURL;
    name: Name;
    attributes?: Attributes;
    description?: Description;
    background_color?: BackgroundColor;
    animation_url?: AnimationURL;
    youtube_url?: YoutubeURL;
    [k: string]: unknown;
}
export interface Attribute {
    trait_type?: TraitType;
    value?: Value;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Self-sovereign Soulbound token (SBT) metadata. Only one SBT exists for a
 */
export type SoulboundTokenCredential = OpenSeaMetadata & {
    did: DID;
    didAddress?: DIDAddress;
    type: Type;
    uniqueAttribute?: UniqueAttribute;
    [k: string]: unknown;
};
/**
 * URL of an image representing this credential
 */
export type DIDAddress = string;
/**
 * Type of credential (ie: 'twitter-10k-followers' or 'linkedin-account')
 */
export type UniqueAttribute = string;
/**
 * OpenSea metadata standards (https://docs.opensea.io/docs/metadata-standards)
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Self-sovereign storage of Soulbound token metadata
 */
export type SoulboundTokenMetadata = BaseSchema & SoulboundTokenCredential & {
    didJwtVc?: DIDJWTVerifiableCredential;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Configuration of a profile on Verida One
 */
export type VeridaOneProfile = BaseSchema & {
    customLinks?: CustomLinks;
    platformLinks?: PlatformLinks;
    walletAddresses?: WalletAddresses;
    featuredAssets?: FeaturedAssets;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Label = string;
export type Featured = boolean;
export type CustomLinks = CustomLink[];
export type Category = "social";
export type Platform = string;
export type AccountId = string;
export type AvatarURL = string;
/**
 * External url to the platform
 */
export type URL1 = string;
export type Order1 = number;
/**
 * @minItems 0
 */
export type PlatformLinks = PlatformLink[];
/**
 * CAIP id of the blockchain
 */
export type ChainId = string;
export type Address = string;
export type Label1 = string;
export type Order2 = number;
/**
 * @minItems 0
 */
export type WalletAddresses = WalletAddress[];
/**
 * CAIP id of the blockchain
 */
export type ChainId1 = string;
export type ContractAddress = string;
export type TokenId = string;
export type OwnerAddress = string;
export type Order3 = number;
/**
 * @minItems 0
 */
export type FeaturedAssets = FeaturedAsset[];
/**
 * A base schema
 */
export interface CustomLink {
    label: Label;
    url: URL;
    featured?: Featured;
    order: Order;
    [k: string]: unknown;
}
export interface PlatformLink {
    category: Category;
    platform: Platform;
    accountId: AccountId;
    avatarUrl?: AvatarURL;
    url: URL1;
    verificationProof?: {
        type: Type;
        proof: Proof;
        [k: string]: unknown;
    };
    order: Order1;
    [k: string]: unknown;
}
export interface Proof {
    [k: string]: unknown;
}
export interface WalletAddress {
    chainId: ChainId;
    address: Address;
    label?: Label1;
    verificationProof?: {
        type: Type1;
        proof: Proof1;
        [k: string]: unknown;
    };
    order: Order2;
    [k: string]: unknown;
}
export interface Type1 {
    [k: string]: unknown;
}
export interface Proof1 {
    [k: string]: unknown;
}
export interface FeaturedAsset {
    chainId: ChainId1;
    contractAddress: ContractAddress;
    tokenId: TokenId;
    ownerAddress: OwnerAddress;
    order: Order3;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Name of the item within card list and details
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Inbox entry for a user
 */
export type InboxMessage = BaseSchema & {
    message?: Message;
    type: Type;
    sentAt: SentDateTime;
    data?: Data;
    sentBy: {
        did?: DID;
        context?: Context;
        [k: string]: unknown;
    };
    read?: Read;
    openUrl?: URLToOpenAfterMessageIsAccepted;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type Message = string;
/**
 * Schema type of the inbox entry
 */
export type SentDateTime = string;
export type Context = string;
export type Read = boolean;
export type URLToOpenAfterMessageIsAccepted = string;
/**
 * A base schema
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type PublicKey = string;
/**
 * An unprocessed, encrypted inbox item in a users public inbox
 */
export interface EncryptedInboxMessage {
    content: Content;
    key: PublicKey;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Type of data being requested
 */
export type UserSelectsTheData = boolean;
/**
 * Limit the number of data records the user can return. Limit is optional.
 */
export type UserSelectLimit = number;
/**
 * Label of the action
 */
export interface DataRequest {
    requestSchema: Schema;
    filter?: Filter;
    userSelect?: UserSelectsTheData;
    userSelectLimit?: UserSelectLimit;
    fallbackAction?: FallbackAction;
    status?: Status;
    [k: string]: unknown;
}
/**
 * Database filter the data must match
 */
export interface Filter {
    [k: string]: unknown;
}
/**
 * An action suggested to the user if they don't have the requested data
 */
export interface FallbackAction {
    label: Label;
    url: URL;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Array of data being sent. Must be valid schema data.
 */
export type ReplyID = string;
/**
 * An inbox message sending data to a user
 */
export interface DataSend {
    data: Data;
    status: Status;
    replyId?: ReplyID;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type SchemasToSync = unknown[];
export type SyncDirection = "pull" | "push" | "both";
export interface DatabaseSyncronization {
    externalDb?: {
        [k: string]: unknown;
    };
    internalDb?: {
        [k: string]: unknown;
    };
    schemas: SchemasToSync;
    filter?: Filter;
    direction?: SyncDirection;
    status?: Status;
    [k: string]: unknown;
}
/**
 * Database filter the data must match
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * URI of the database to sync to
 */
export type DatastoreSchemaToSync = string;
export interface DatastoreSyncronization {
    schema: DatastoreSchemaToSync;
    externalDs?: {
        [k: string]: unknown;
    };
    filter?: Filter;
    direction?: SyncDirection;
    status?: Status;
    [k: string]: unknown;
}
/**
 * Database filter the data must match
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type Subject = string;
export type Text = string;
/**
 * ID of an inbox message this is responding to
 */
export interface GenericInboxMessage {
    subject: Subject;
    message: Message;
    /**
     * Optional link that user can click on for more information
     */
    link?: {
        url?: URL;
        text?: Text;
        [k: string]: unknown;
    };
    replyId?: ReplyID;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Outbox Message
 */
export type OutboxEntry = BaseSchema & {
    type: Type;
    data: Data;
    message: Message;
    sentTo: RecipientDID;
    sent?: Sent;
    openUrl?: URLToOpenAfterMessageIsAccepted;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type RecipientDID = string;
export type Sent = boolean;
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Symmetric encryption key as a hex string
 */
export type Key = string;
/**
 * Type of symmetric encryption key
 */
export interface SymmetricKey {
    key: Key;
    type: Type;
    [k: string]: unknown;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A database instance belonging to the current application
 */
export type DatabaseSchema = BaseSchema & {
    dbName?: DatabaseName;
    did?: DIDThatOwnsTheDatabase;
    endpointType?: TypeOfSecureContextEndpoint;
    contextName?: ContextName;
    permissions?: Permissions;
    encryptionKey?: SymmetricKey;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type DatabaseName = string;
export type DIDThatOwnsTheDatabase = string;
export type TypeOfSecureContextEndpoint = string;
export type ContextName = string;
/**
 * Symmetric encryption key as a hex string
 */
export interface Permissions {
    [k: string]: unknown;
}
/**
 * A symmetric key
 */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A database sync
 */
export type SyncBetweenTwoDatabases = BaseSchema & {
    externalDbName?: ExternalDatabaseName;
    externalDid?: ExternalDID;
    externalApplicationName?: ExternalApplicationName;
    externalKey?: ExternalKey;
    externalKeyType?: ExternalKeyType;
    destinationDbName?: DestinationDatabaseName;
    schemas?: SchemasToSync;
    filter?: Filter;
    syncType?: SyncType;
    frequency?: SyncFrequency;
    [k: string]: unknown;
};
/**
 * Name of the item within card list and details
 */
export type ExternalDatabaseName = string;
export type ExternalDID = string;
export type ExternalApplicationName = string;
export type ExternalKey = string;
export type ExternalKeyType = string;
export type DestinationDatabaseName = string;
export type SyncType = "pull" | "push";
/**
 * How often to sync the databases (in minutes). 0 = live. Default = 60 minutes
 */
export type SyncFrequency = number;
/**
 * A base schema
 */
export * from 'schema-dts';
